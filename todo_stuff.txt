PRIORIDADE:
<<<<<<< HEAD
    - se posição enemy = hero colocar gameOver, não prever o futuro

    - colocar nos canMove_() a condição false se tiver gameOver (deixar a possibilidade de ir contra a armadilha
    e contra a múmia, para explorar todos os casos sucessores)
    - gameOver -> sair do caso sucessor (não pode procurar mais casos sucessores)
=======
>>>>>>> cd243492b025c82de622259fce0cbc14d2206c9c


    - falta estatísticas
    - quando temos muitos inimigos iguais, dá erro na inicialização

    - dizer no relatorio como é que estamos a matar inimigos (quem se mexe para cima de um inimigo, mata sempre o inimigo)

PERGUNTAR SE É POSSIVEL TER + QUE 1 CHAVE




-TEMOS MUITO CODIGO REPETIDO PARA MEXER OS INIMIGOS. DEPOIS METER AS COISAS EM MÉTODOS

---------------------------------
---------------------------------

1º actions (cima, baixo, esquerda, direita, ficar parado)
2º heuristicas

definir o custo das ações
definir um goal state para o mummymazeproblem

(numa condição algures, contamos sempre TER PAREDE OU PORTAO FECHADO, pois o portao pode estar aberto)

matriz: só quando se vai aplicar a ação para alterar o estado

1º) Cria o estado inicial a partir da leitura do ficheiro
2º) H executa a ação
3º) Por cada ação executada cria várias strings (ex: por cada ação de H, pode existir x ações de M)




1ºMAINFRAME EXECUTA AGENT.SHOWSOLUTION
2º AGENT EXECUTA EXECUTACTION (PARA CADA AÇÃO DA LISTA DE AÇÕES, PARA A EXECUTAR SOBRE O ESTADO)


//Considerando que as posições (0,0), (0,12), (12,0) e (12,12) são inválidas
if (lineExit == 12){
    goalPosition= [lineExit-1][columnExit];
}elseif (lineExit == 0){
    goalPosition= [lineExit+1][columnExit];
}elseif (columnExit == 0){
    goalPosition= [lineExit][columnExit+1];
}elseif (columnExit == 12){
    goalPosition= [lineExit][columnExit-1];
}





------------------ Para o relatório ------------------
Funções criadas:
    -> convertMatrixToString() //Na classe MummyMazeState
    -> computeExitDistance() //Na classe MummyMazeState